1) Syntax Parser:

A programm called as compiler converts source code written in Javascript to a machine understandable language.
It reads code line by line and check if there are any syntax errors according to its code.
This programm that checks syntax is called as syntax parser.

2) Lexical Environment

This means where where something physically sits in your code i.e. inside which function or is it present globally. 
Few things are determined by the position of your variables and functions inside a code.

3) Execution Context

A wrapper to help manage the code that is running. The lexical environment that is currently running is defined by execution context.

4) Name/Value pairs and Objects

Name that maps to unique value. A name can only have one value in a given execution context.
Value can be more name/value pairs.

Ex. Address = "77N Almaden Ave"

Object is collection of name value pairs.

5) Global Environment and global object

JS engine wraps yyour code in execution context

Anything written outside of all the functions, comes under global execution context.
Execution context has global object and a special variable called 'this'.

In case of browsers global object is window where your javascript code is running.
Initally, when JS code starts execution, this and window object are created. this points to window initially.

If there was a separate tab open., then it will be a separate global object.

At global level this=window

global: not inside a function

Every execution context has your code, outer environment, global object and this variable.

6) Creation and Hoisting

Execution context is created in two phase

a) Creation phase

Global object, this is setup in memory
outer env is created

Memory space for variables and functions is setup. It is called as Hoisting
Before code starts execution line by line, variables and functions are setup in memory.

Function is placed in memory.
Variable declaration is set up in memory. Its value is not stored. 
Undefined placeholder is set to it.

b) Execution Phase

Code is run line by line




7) Undefined

Javascript has special value/ keyword called undefined that means variable has not been set yet but it is declared.
Never set any variable undefined yourself. Let it always mean I have never defined this variable.


8) JS is Single Threaded and synchronous execution

One command is getting executed at a time: single threaded.
One line at a time in th eorder it appears: synchronous


9) Function invocation and excecution context


Invocation: running or calling a function

Every function execution creates a new execution context and recent function call is placed on execution stack.
When it finishes execution, it is popped out of stack.
Even if function calls itself, a new execution context is created.
Whatever is on top of stack is currently running.

10) Functions, Contexts and Variable environments

Variable env: where the variable lives.
and how they relate to each other in memory.

11) Scope Chain

Every execution context has reference to its outer environment.
Ourter reference is calculated by lexical environment.

If variable is not declared inside an execution env, it looks for outer ref if not found it looks in its outer ref
This is called as scope chain.

12) Scope ES6 and Let
scope is where your variable is available.


let allows block scoping
You cannot use variable before writing 
let a='Hello';

It has block scoping. Vatiable won't available outside block.

13) Asynchronous callbacks

Asynchronous: more than one at a time

Inside browser, there is a a javascript engine. But along with this there are other programs like rendering engine or program that
takes care of HTTP requests


Event Queue is present inside JS engine
JS engine executes code synchronously.
But the browser programs are being executed alongwith JS code asynchronously.
So all the browser evets are placed in event queue.

When JS engine execution stacks get empty it takes out first event from event queue, creates it execution context and completes its execution.
Then takes next event if stack is empty and executes it.




