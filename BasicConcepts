1) Syntax Parser:

A programm called as compiler converts source code written in Javascript to a machine understandable language.
It reads code line by line and check if there are any syntax errors according to its code.
This programm that checks syntax is called as syntax parser.

2) Lexical Environment

This means where where something physically sits in your code i.e. inside which function or is it present globally. 
Few things are determined by the position of your variables and functions inside a code.

3) Execution Context

A wrapper to help manage the code that is running. The lexical environment that is currently running is defined by execution context.

4) Name/Value pairs and Objects

Name that maps to unique value. A name can only have one value in a given execution context.
Value can be more name/value pairs.

Ex. Address = "77N Almaden Ave"

Object is collection of name value pairs.

5) Global Environment and global object

JS engine wraps yyour code in execution context

Anything written outside of all the functions, comes under global execution context.
Execution context has global object and a special variable called 'this'.

In case of browsers global object is window where your javascript code is running.
Initally, when JS code starts execution, this and window object are created. this points to window initially.

If there was a separate tab open., then it will be a separate global object.

At global level this=window

global: not inside a function

Every execution context has your code, outer environment, global object and this variable.

6) Creation and Hoisting

Execution context is created in two phase

a) Creation phase

Global object, this is setup in memory
outer env is created

Memory space for variables and functions is setup. It is called as Hoisting
Before code starts execution line by line, variables and functions are setup in memory.

Function is placed in memory.
Variable declaration is set up in memory. Its value is not stored. 
Undefined placeholder is set to it.

b) Execution Phase

Code is run line by line




7) Undefined

Javascript has special value/ keyword called undefined that means variable has not been set yet but it is declared.
Never set any variable undefined yourself. Let it always mean I have never defined this variable.


8) JS is Single Threaded and synchronous execution

One command is getting executed at a time: single threaded.
One line at a time in th eorder it appears: synchronous


9) Function invocation and excecution context


Invocation: running or calling a function

Every function execution creates a new execution context and recent function call is placed on execution stack.
When it finishes execution, it is popped out of stack.
Even if function calls itself, a new execution context is created.
Whatever is on top of stack is currently running.

10) Functions, Contexts and Variable environments

Variable env: where the variable lives.
and how they relate to each other in memory.

11) Scope Chain

Every execution context has reference to its outer environment.
Ourter reference is calculated by lexical environment.

If variable is not declared inside an execution env, it looks for outer ref if not found it looks in its outer ref
This is called as scope chain.

12) Scope ES6 and Let
scope is where your variable is available.


let allows block scoping
You cannot use variable before writing 
let a='Hello';

It has block scoping. Vatiable won't available outside block.

13) Asynchronous callbacks

Asynchronous: more than one at a time

Inside browser, there is a a javascript engine. But along with this there are other programs like rendering engine or program that
takes care of HTTP requests


Event Queue is present inside JS engine
JS engine executes code synchronously.
But the browser programs are being executed alongwith JS code asynchronously.
So all the browser evets are placed in event queue.

When JS engine execution stacks get empty it takes out first event from event queue, creates it execution context and completes its execution.
Then takes next event if stack is empty and executes it.

14) Types and Javascript

Dynamic Typing: You don't tell what type of data your variable holds. Engine figures it out while code is running depending on the value
assigned to the variable.
Ex var isNew=true
isNew="Yup"
isNew=1

Static Typing: You tell beforehand what type of data variable will hold.
Ex. bool isNew = true
    bool isNew = "Hello" //error

15) Primitve Types: 6

Primitve type: data that represents single value. Something that is not an object, not a collection

a) undefined
b) null //lack of existence. Programmer can assign it for variable set to nothing
c) boolean: true or false
d) number: floating point number always some decimal
e) string: sequence of characters. single or double quotes
f) symbol ES6


16) Operators

A special function that is syntactically written differently.
Generally, it has two parameters and one written type.


17) Operators precedence and associativity

precedence: which one gets called first when there are multiple Operators
associativity: what order an operator gets called in L to R (left associativity) R to L(right) when same precedence operators are encountered


18) Coercion: converting a value from one type to another.

19) Strict equality: When JS checks if two values are eual and of same type.

20) Existence and Booleans

Boolean(undefined) //false
Boolean(null) //false
Boolean("") //false
Boolean(0) //false doesn't mean lack of existence


21) Default values returned using OR operator

22) Objects and declaration
Object : colleaction of value
Object has property, methods, another object(considered as property) sits in memory and has reference to property and methods

Object can be accessed by member access operator in following manner

person["firstname"]="Kriti"

[] is member access operator

member access operator is useful if you want to access some object with its property that is set dynamically


22) Object literals

var person = {} //same as new object

23) Namespace

A container for variables and functions to keep variables and functions with same name separate
If you want to declare two variables with same name you can do it by declaring these variables as object properties.

Ex. Faking namespaces

var english = {
    greet:"Hello"
}
var spanish = {
    greet:"Hola"
}

console.log(english.greet) //Hello
console.log(spanish.greet) //Hola

24) JSON: Javascript Object notation inpired by javascript object literal syntax

JSON is subtype of object literal. In JSON it is compulsory to wrap peroperty name in double quotes whereas
in object literal syntax it is optional.

Now-a-days JSON is used to transfer data in internet.
JS provide easy way to convert data from object literal to JSON and other way










